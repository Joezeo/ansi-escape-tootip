String properties(String key) {
    return project.findProperty(key).toString()
}

String fileProperties(String key) {
    return project.findProperty(key).toString().let { if (it.isNotEmpty()) file(it) else null }
}

plugins {
    // Java support
    id("java")
    // gradle-intellij-plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin
    id("org.jetbrains.intellij") version "1.8.0"
    // gradle-changelog-plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
    id("org.jetbrains.changelog") version "1.3.1"
}

group "com.toocol.plugin"
version = properties("pluginVersion")

String depsDartVersion = properties("depsDartVersion")
String depsGoVersion = properties("depsGoVersion")
String depsKotlinVersion = properties("depsKotlinVersion")
String depsPhpVersion = properties("depsPhpVersion")
String depsPyVersion = properties("depsPyVersion")
String depsRubyVersion = properties("depsRubyVersion")
String depsScalaVersion = properties("depsScalaVersion")

repositories {
    mavenCentral()
    maven { url = "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url = "https://www.jetbrains.com/intellij-repository/snapshots" }
    maven { url = "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url = "https://repo.eclipse.org/content/groups/releases/" }
}

dependencies {

}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName.set(properties("pluginName"))
    version.set(properties("platformVersion"))
    type.set(properties("platformType"))
    downloadSources.set(true)
    instrumentCode.set(false)
    updateSinceUntilBuild.set(true)

    plugins = [
            "java",
            "java-i18n",
            "DatabaseTools",
            "Dart:$depsDartVersion",
            "CSS",
            "properties",
            "yaml",
            "markdown",
            "Pythonid:$depsPyVersion",
            "org.jetbrains.plugins.go:$depsGoVersion",
            "org.jetbrains.kotlin:$depsKotlinVersion",
            "org.intellij.scala:$depsScalaVersion",
            "org.jetbrains.plugins.ruby:$depsRubyVersion",
            "com.jetbrains.php:$depsPhpVersion"
    ]
}

changelog {
    path.set("${project.projectDir}/docs/CHANGELOG.md")
    version.set(properties("pluginVersion"))
    header.set(provider { version.get() })
    itemPrefix.set("-")
    keepUnreleasedSection.set(true)
    unreleasedTerm.set("[Unreleased]")
    groups = ["Features", "Fixes", "Other", "Bump"]
}

tasks {
    patchPluginXml {
        version.set(properties("pluginVersion"))
        sinceBuild.set("213")
        untilBuild.set("223.*")

        // Get the latest available change notes from the changelog file
//        changeNotes.set(changelog.getLatest().toHTML())
    }

    signPlugin {
        certificateChain.set(System.getenv("CERTIFICATE_CHAIN"))
        privateKey.set(System.getenv("PRIVATE_KEY"))
        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    }

    publishPlugin {
        token.set(System.getenv("PUBLISH_TOKEN"))
    }

//    register("markdownToHtml") {
//        File input = File("./docs/CHANGELOG.md")
//        File("./docs/CHANGELOG.html").run {
//            writeText(markdownToHTML(input.readText()))
//        }
//    }
}