String properties(String key) {
    return project.findProperty(key).toString()
}
String fileProperties(String key) {
    return project.findProperty(key).toString().let { if (it.isNotEmpty()) file(it) else null }
}

plugins {
    id 'java'
    // gradle-intellij-plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin
    id 'org.jetbrains.intellij' version '1.8.0'
    // gradle-changelog-plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
    id("org.jetbrains.changelog") version "1.3.1"
}

group 'com.toocol.plugin'
version = properties("pluginVersion")

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = '2021.3.2'
}

changelog {
    path.set("${project.projectDir}/docs/CHANGELOG.md")
    version.set(properties("pluginVersion"))
    header.set(provider { version.get() })
    itemPrefix.set("-")
    keepUnreleasedSection.set(true)
    unreleasedTerm.set("[Unreleased]")
//    groups.set(listOf("Features", "Fixes", "Other", "Bump"))
}

test {
    useJUnitPlatform()
}

tasks {
    patchPluginXml {
        version.set(properties("pluginVersion"))
        sinceBuild.set("213")
        untilBuild.set("223.*")

        // Get the latest available change notes from the changelog file
//        changeNotes.set(changelog.getLatest().toHTML())
    }

    signPlugin {
        certificateChain.set(System.getenv("CERTIFICATE_CHAIN"))
        privateKey.set(System.getenv("PRIVATE_KEY"))
        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    }

    publishPlugin {
        token.set(System.getenv("PUBLISH_TOKEN"))
    }
}